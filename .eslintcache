[{"/Users/matthewkastner/Documents/skylar/population-temperatures/src/index.js":"1","/Users/matthewkastner/Documents/skylar/population-temperatures/src/App.js":"2","/Users/matthewkastner/Documents/skylar/population-temperatures/src/reportWebVitals.js":"3","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/Header.js":"4","/Users/matthewkastner/Documents/skylar/population-temperatures/src/routes.js":"5","/Users/matthewkastner/Documents/skylar/population-temperatures/src/pages/Graph.js":"6","/Users/matthewkastner/Documents/skylar/population-temperatures/src/pages/MapChart.js":"7","/Users/matthewkastner/Documents/skylar/population-temperatures/src/redux/store.js":"8","/Users/matthewkastner/Documents/skylar/population-temperatures/src/redux/reducer.js":"9","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/MinMaxAvgChart.js":"10","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/MissingChart.js":"11","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/SeasonalChart.js":"12","/Users/matthewkastner/Documents/skylar/population-temperatures/src/pages/AllCitiesGraph.js":"13","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/all-cities/SeasonalChart.js":"14","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/all-cities/MinMaxAvgChart.js":"15","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/all-cities/MissingChart.js":"16"},{"size":713,"mtime":1620262373394,"results":"17","hashOfConfig":"18"},{"size":2146,"mtime":1620262373418,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1611017423767,"results":"20","hashOfConfig":"18"},{"size":368,"mtime":1619905241519,"results":"21","hashOfConfig":"18"},{"size":429,"mtime":1620235053685,"results":"22","hashOfConfig":"18"},{"size":2777,"mtime":1620255514947,"results":"23","hashOfConfig":"18"},{"size":5191,"mtime":1620262373523,"results":"24","hashOfConfig":"18"},{"size":231,"mtime":1619922800967,"results":"25","hashOfConfig":"18"},{"size":2677,"mtime":1620262373675,"results":"26","hashOfConfig":"18"},{"size":3504,"mtime":1620255596933,"results":"27","hashOfConfig":"18"},{"size":5884,"mtime":1620262373648,"results":"28","hashOfConfig":"18"},{"size":3542,"mtime":1620262373676,"results":"29","hashOfConfig":"18"},{"size":4779,"mtime":1620259335883,"results":"30","hashOfConfig":"18"},{"size":4759,"mtime":1620262373719,"results":"31","hashOfConfig":"18"},{"size":4589,"mtime":1620255608243,"results":"32","hashOfConfig":"18"},{"size":6580,"mtime":1620262674997,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uiv0jf",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/matthewkastner/Documents/skylar/population-temperatures/src/index.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/App.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/reportWebVitals.js",[],["69","70"],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/Header.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/routes.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/pages/Graph.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/pages/MapChart.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/redux/store.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/redux/reducer.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/MinMaxAvgChart.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/MissingChart.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/SeasonalChart.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/pages/AllCitiesGraph.js",["71"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport mapImage from \"../map-image.png\";\nimport \"../styles/Graph.scss\";\n\n// import PulseLoader from \"react-spinners/PulseLoader\";\n// import axios from \"axios\";\n\nimport { selectCity, loadData } from \"../redux/reducer\";\n\nimport SeasonalChart from \"../components/all-cities/SeasonalChart\";\nimport MinMaxAvgChart from \"../components/all-cities/MinMaxAvgChart\";\nimport MissingChart from \"../components/all-cities/MissingChart\";\n\nclass Graph extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      showSeasonal: true,\n      showMinMaxAvg: false,\n      showMissing: false,\n      showMax: true,\n      showMean: false,\n      showMin: false,\n      waiting: false,\n      override: `\n          display: block;\n          margin: auto auto;\n          border-color: red;\n        `,\n    };\n  }\n\n  updateSelected(chartName) {\n    let defaultState = {\n      showSeasonal: false,\n      showMinMaxAvg: false,\n      showMissing: false,\n    };\n    this.setState({\n      ...defaultState,\n      [chartName]: true,\n    });\n  }\n\n  updateSelectedTempType(tempName) {\n    let defaultState = {\n      showMax: false,\n      showMean: false,\n      showMin: false,\n    };\n    this.setState({\n      ...defaultState,\n      [tempName]: true,\n    });\n  }\n\n  render() {\n    let tempType = \"\";\n    if (this.state.showMax) {\n      tempType = \"max\";\n    }\n    if (this.state.showMean) {\n      tempType = \"mean\";\n    }\n    if (this.state.showMin) {\n      tempType = \"min\";\n    }\n\n    return (\n      <div className=\"Graph\">\n        <form className=\"options\">\n          <div className=\"input-container\">\n            <input\n              onChange={() => this.updateSelected(\"showSeasonal\")}\n              checked={this.state.showSeasonal}\n              name=\"option\"\n              type=\"radio\"\n              id=\"min-max-avg\"\n              className=\"choices\"\n            />\n            <label>Seasonal average as well as high and low cases</label>\n          </div>\n          <div className=\"input-container\">\n            <input\n              onChange={() => this.updateSelected(\"showMinMaxAvg\")}\n              checked={this.state.showMinMaxAvg}\n              name=\"option\"\n              type=\"radio\"\n              id=\"seasonal\"\n              className=\"choices\"\n            />\n            <label>View the monthly average, min and max</label>\n          </div>\n          <div className=\"input-container\">\n            <input\n              onChange={() => this.updateSelected(\"showMissing\")}\n              checked={this.state.showMissing}\n              name=\"option\"\n              type=\"radio\"\n              id=\"missing-data\"\n              className=\"choices\"\n            />\n            <label>See what data is projected.</label>\n          </div>\n        </form>\n        <form className=\"temp-types\">\n          <div className=\"input-container\">\n            {/* {this.state.showMax ? \"max\" : \"not max\"} */}\n            <input\n              onChange={() => this.updateSelectedTempType(\"showMax\")}\n              checked={this.state.showMax}\n              name=\"temp-type\"\n              type=\"radio\"\n              id=\"min-max-avg\"\n              className=\"choices\"\n            />\n            <label>Max</label>\n          </div>\n          <div className=\"input-container\">\n            <input\n              onChange={() => this.updateSelectedTempType(\"showMean\")}\n              checked={this.state.showMean}\n              name=\"temp-type\"\n              type=\"radio\"\n              id=\"seasonal\"\n              className=\"choices\"\n            />\n            <label>Mean</label>\n          </div>\n          <div className=\"input-container\">\n            <input\n              onChange={() => this.updateSelectedTempType(\"showMin\")}\n              checked={this.state.showMin}\n              name=\"temp-type\"\n              type=\"radio\"\n              id=\"missing-data\"\n              className=\"choices\"\n            />\n            <label>Min</label>\n          </div>\n        </form>\n\n        {this.state.showSeasonal ? <SeasonalChart tempType={tempType} /> : null}\n\n        {this.state.showMinMaxAvg ? (\n          <MinMaxAvgChart tempType={tempType} />\n        ) : null}\n\n        {this.state.showMissing ? <MissingChart tempType={tempType} /> : null}\n        <div className=\"map-image--container\">\n          <img\n            onClick={() => this.props.history.push(\"/map\")}\n            src={mapImage}\n            className=\"view-map\"\n          />\n          <p className=\"view---text\">View map</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { city: state.city };\n}\n\nexport default connect(mapStateToProps, {\n  selectCity,\n  loadData,\n})(withRouter(Graph));\n","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/all-cities/SeasonalChart.js",["72"],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/all-cities/MinMaxAvgChart.js",["73"],"import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport moment from \"moment\";\n\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nclass MinMaxAvgChart extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: \"\",\n      cities: {},\n      waiting: false,\n      tempType: \"max\",\n      override: `\n        `,\n      options: {\n        colors: [\n          \"#bada55\",\n          \"#7fe5f0\",\n          \"#ff0000\",\n          \"#ff80ed\",\n          \"#407294\",\n          \"#420420\",\n          \"#133337\",\n          \"#065535\",\n          \"#c0c0c0\",\n          \"#000000\",\n          \"#5ac18e\",\n          \"#dcedc1\",\n          \"#f7347a\",\n          \"#576675\",\n          \"#ffc0cb\",\n          \"#ffe4e1\",\n          \"#008080\",\n          \"#ffd700\",\n          \"#e6e6fa\",\n          \"#ff7373\",\n          \"#00ffff\",\n          \"#40e0d0\",\n          \"#0000ff\",\n          \"#d3ffce\",\n          \"#b0e0e6\",\n          \"#c6e2ff\",\n          \"#003366\",\n          \"#800080\",\n          \"#7fffd4\",\n          \"#20b2aa\",\n          \"#333333\",\n          \"#66cdaa\",\n          \"#ff00ff\",\n          \"#ff7f50\",\n          \"#4ca3dd\",\n          \"#008000\",\n          \"#daa520\",\n          \"#000080\",\n        ],\n        dataLabels: {\n          enabled: false,\n        },\n        chart: {\n          type: \"area\",\n          animations: {\n            enabled: true,\n            easing: \"easeinout\",\n            speed: 800,\n            animateGradually: {\n              enabled: true,\n              delay: 0,\n            },\n            dynamicAnimation: {\n              enabled: false,\n              speed: 350,\n            },\n          },\n          // stacked: false,\n          // height: 350,\n          zoom: {\n            type: \"x\",\n            enabled: true,\n            autoScaleYaxis: true,\n          },\n          toolbar: {\n            autoSelected: \"zoom\",\n          },\n        },\n        fill: {\n          type: \"none\",\n          // gradient: {\n          //   shadeIntensity: 1,\n          //   inverseColors: false,\n          //   opacityFrom: 0.5,\n          //   opacityTo: 0,\n          //   stops: [0, 90, 100]\n          // },\n        },\n        stroke: {\n          // curve: \"smooth\",\n        },\n        xaxis: {\n          type: \"datetime\",\n          categories: [],\n        },\n        yaxis: {\n          labels: {\n            formatter: function (val) {\n              return val.toFixed(3) + \"°C\";\n            },\n          },\n        },\n        tooltip: {\n          x: {\n            format: \"dd/MM/yy\",\n          },\n        },\n      },\n    };\n  }\n\n  loadData = async () => {\n    this.setState({\n      waiting: true,\n    });\n    let response = await axios.put(`/api/temperature-data/monthly`);\n    response = response.data;\n\n    this.setState({\n      cities: response,\n      waiting: false,\n    });\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    let dates = [];\n    let series = [];\n\n    for (let city in this.state.cities) {\n      this.state.cities[city].dates.forEach((row) => {\n        dates.push(moment(row).format(\"MM-YY\"));\n      });\n      break;\n    }\n\n    for (let city in this.state.cities) {\n      if (this.props.tempType === \"max\") {\n        series.push(this.state.cities[city].series[0]);\n      }\n      if (this.props.tempType === \"mean\") {\n        series.push(this.state.cities[city].series[1]);\n      }\n      if (this.props.tempType === \"min\") {\n        series.push(this.state.cities[city].series[2]);\n      }\n    }\n\n    let options = {\n      ...this.state.options,\n      xaxis: {\n        ...this.state.options,\n        categories: dates,\n        tickAmount: 10,\n      },\n    };\n\n    return (\n      <div\n        style={{\n          backgroundColor: \"white\",\n          textAlign: \"center\",\n        }}\n      >\n        <br />\n        <h2>{this.state.name ? \"Temperature for \" + this.state.name : \"\"}</h2>\n        <br />\n        {this.state.waiting ? (\n          <div className=\"waiting-spinner\">\n            <PulseLoader\n              color=\"#2BC6CB\"\n              css={this.state.override}\n              loading={true}\n              size={20}\n              margin={10}\n            />\n          </div>\n        ) : (\n          <ReactApexChart\n            options={options}\n            series={series}\n            type=\"line\"\n            height={550}\n            width={900}\n          />\n        )}\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MinMaxAvgChart);\n","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/all-cities/MissingChart.js",["74","75","76","77","78"],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":154,"column":11,"nodeType":"85","endLine":158,"endColumn":13},{"ruleId":"86","severity":1,"message":"87","line":6,"column":8,"nodeType":"88","messageId":"89","endLine":6,"endColumn":19},{"ruleId":"86","severity":1,"message":"87","line":6,"column":8,"nodeType":"88","messageId":"89","endLine":6,"endColumn":19},{"ruleId":"86","severity":1,"message":"90","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":22},{"ruleId":"86","severity":1,"message":"87","line":7,"column":8,"nodeType":"88","messageId":"89","endLine":7,"endColumn":19},{"ruleId":"91","severity":1,"message":"92","line":140,"column":31,"nodeType":"93","messageId":"94","endLine":140,"endColumn":33},{"ruleId":"91","severity":1,"message":"92","line":143,"column":31,"nodeType":"93","messageId":"94","endLine":143,"endColumn":33},{"ruleId":"91","severity":1,"message":"92","line":146,"column":31,"nodeType":"93","messageId":"94","endLine":146,"endColumn":33},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'queryString' is defined but never used.","Identifier","unusedVar","'ReactApexChart' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]