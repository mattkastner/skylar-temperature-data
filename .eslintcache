[{"/Users/matthewkastner/Documents/skylar/population-temperatures/src/index.js":"1","/Users/matthewkastner/Documents/skylar/population-temperatures/src/App.js":"2","/Users/matthewkastner/Documents/skylar/population-temperatures/src/reportWebVitals.js":"3","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/Header.js":"4","/Users/matthewkastner/Documents/skylar/population-temperatures/src/routes.js":"5","/Users/matthewkastner/Documents/skylar/population-temperatures/src/pages/Graph.js":"6","/Users/matthewkastner/Documents/skylar/population-temperatures/src/pages/MapChart.js":"7","/Users/matthewkastner/Documents/skylar/population-temperatures/src/redux/store.js":"8","/Users/matthewkastner/Documents/skylar/population-temperatures/src/redux/reducer.js":"9","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/MinMaxAvgChart.js":"10","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/MissingChart.js":"11","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/SeasonalChart.js":"12","/Users/matthewkastner/Documents/skylar/population-temperatures/src/pages/AllCitiesGraph.js":"13","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/all-cities/SeasonalChart.js":"14","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/all-cities/MinMaxAvgChart.js":"15","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/all-cities/MissingChart.js":"16"},{"size":713,"mtime":1620262373394,"results":"17","hashOfConfig":"18"},{"size":2146,"mtime":1620262373418,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1611017423767,"results":"20","hashOfConfig":"18"},{"size":368,"mtime":1619905241519,"results":"21","hashOfConfig":"18"},{"size":429,"mtime":1620235053685,"results":"22","hashOfConfig":"18"},{"size":2777,"mtime":1620255514947,"results":"23","hashOfConfig":"18"},{"size":5191,"mtime":1620262373523,"results":"24","hashOfConfig":"18"},{"size":231,"mtime":1619922800967,"results":"25","hashOfConfig":"18"},{"size":2677,"mtime":1620262373675,"results":"26","hashOfConfig":"18"},{"size":3504,"mtime":1620255596933,"results":"27","hashOfConfig":"18"},{"size":5884,"mtime":1620262373648,"results":"28","hashOfConfig":"18"},{"size":3542,"mtime":1620262373676,"results":"29","hashOfConfig":"18"},{"size":4867,"mtime":1620263304222,"results":"30","hashOfConfig":"18"},{"size":4759,"mtime":1620262373719,"results":"31","hashOfConfig":"18"},{"size":4589,"mtime":1620255608243,"results":"32","hashOfConfig":"18"},{"size":6580,"mtime":1620262674997,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1uiv0jf",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},"/Users/matthewkastner/Documents/skylar/population-temperatures/src/index.js",[],["70","71"],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/App.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/reportWebVitals.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/Header.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/routes.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/pages/Graph.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/pages/MapChart.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/redux/store.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/redux/reducer.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/MinMaxAvgChart.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/MissingChart.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/SeasonalChart.js",[],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/pages/AllCitiesGraph.js",["72"],"/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/all-cities/SeasonalChart.js",["73"],"import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport moment from \"moment\";\n\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nclass MinMaxAvgChart extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: \"\",\n      cities: {},\n      waiting: false,\n      tempType: \"max\",\n      override: `\n        `,\n      options: {\n        colors: [\n          \"#bada55\",\n          \"#7fe5f0\",\n          \"#000080\",\n          \"#ff80ed\",\n          \"#407294\",\n          \"#420420\",\n          \"#133337\",\n          \"#065535\",\n          \"#c0c0c0\",\n          \"#000000\",\n          \"#5ac18e\",\n          \"#dcedc1\",\n          \"#f7347a\",\n          \"#576675\",\n          \"#ffc0cb\",\n          \"#ffe4e1\",\n          \"#008080\",\n          \"#ffd700\",\n          \"#e6e6fa\",\n          \"#ff7373\",\n          \"#00ffff\",\n          \"#40e0d0\",\n          \"#0000ff\",\n          \"#d3ffce\",\n          \"#b0e0e6\",\n          \"#c6e2ff\",\n          \"#003366\",\n          \"#800080\",\n          \"#7fffd4\",\n          \"#20b2aa\",\n          \"#333333\",\n          \"#66cdaa\",\n          \"#ff00ff\",\n          \"#ff7f50\",\n          \"#ff0000\",\n          \"#ff0000\",\n          \"#ff0000\",\n          \"#ff0000\",\n        ],\n        dataLabels: {\n          enabled: false,\n        },\n        chart: {\n          type: \"area\",\n          animations: {\n            enabled: true,\n            easing: \"easeinout\",\n            speed: 800,\n            animateGradually: {\n              enabled: true,\n              delay: 0,\n            },\n            dynamicAnimation: {\n              enabled: false,\n              speed: 350,\n            },\n          },\n          // stacked: false,\n          // height: 350,\n          zoom: {\n            type: \"x\",\n            enabled: true,\n            autoScaleYaxis: true,\n          },\n          toolbar: {\n            autoSelected: \"zoom\",\n          },\n        },\n        fill: {\n          type: \"none\",\n          // gradient: {\n          //   shadeIntensity: 1,\n          //   inverseColors: false,\n          //   opacityFrom: 0.5,\n          //   opacityTo: 0,\n          //   stops: [0, 90, 100]\n          // },\n        },\n        stroke: {\n          // curve: \"smooth\",\n        },\n        xaxis: {\n          type: \"datetime\",\n          categories: [],\n        },\n        yaxis: {\n          labels: {\n            formatter: function (val) {\n              return val.toFixed(3) + \"Â°C\";\n            },\n          },\n        },\n        tooltip: {\n          x: {\n            format: \"dd/MM/yy\",\n          },\n        },\n      },\n    };\n  }\n\n  loadData = async () => {\n    this.setState({\n      waiting: true,\n    });\n    let response = await axios.put(`/api/temperature-data/seasonal`);\n    response = response.data;\n    // // console.log(response);\n\n    this.setState({\n      cities: response,\n      waiting: false,\n    });\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    let dates = [];\n    let series = [];\n\n    // // console.log(this.state.cities);\n    for (let city in this.state.cities) {\n      this.state.cities[city].dates.forEach((row) => {\n        // // console.log(row);\n        dates.push(moment(row).format(\"MM-YY\"));\n      });\n      break;\n    }\n    // // console.log(dates);\n\n    for (let city in this.state.cities) {\n      if (this.props.tempType === \"max\") {\n        series.push(this.state.cities[city].series[0]);\n      }\n      if (this.props.tempType === \"mean\") {\n        series.push(this.state.cities[city].series[1]);\n      }\n      if (this.props.tempType === \"min\") {\n        series.push(this.state.cities[city].series[2]);\n      }\n    }\n\n    // // console.log(series);\n\n    let options = {\n      ...this.state.options,\n      xaxis: {\n        ...this.state.options,\n        categories: dates,\n        tickAmount: 10,\n      },\n    };\n\n    return (\n      <div\n        style={{\n          backgroundColor: \"white\",\n          textAlign: \"center\",\n        }}\n      >\n        <br />\n        <h2>{this.state.name ? \"Temperature for \" + this.state.name : \"\"}</h2>\n        <br />\n        {this.state.waiting ? (\n          <div className=\"waiting-spinner\">\n            <PulseLoader\n              color=\"#2BC6CB\"\n              css={this.state.override}\n              loading={true}\n              size={20}\n              margin={10}\n            />\n          </div>\n        ) : (\n          <ReactApexChart\n            options={options}\n            series={series}\n            type=\"line\"\n            height={550}\n            width={900}\n          />\n        )}\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MinMaxAvgChart);\n","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/all-cities/MinMaxAvgChart.js",["74"],"import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport moment from \"moment\";\n\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nclass MinMaxAvgChart extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: \"\",\n      cities: {},\n      waiting: false,\n      tempType: \"max\",\n      override: `\n        `,\n      options: {\n        colors: [\n          \"#bada55\",\n          \"#7fe5f0\",\n          \"#ff0000\",\n          \"#ff80ed\",\n          \"#407294\",\n          \"#420420\",\n          \"#133337\",\n          \"#065535\",\n          \"#c0c0c0\",\n          \"#000000\",\n          \"#5ac18e\",\n          \"#dcedc1\",\n          \"#f7347a\",\n          \"#576675\",\n          \"#ffc0cb\",\n          \"#ffe4e1\",\n          \"#008080\",\n          \"#ffd700\",\n          \"#e6e6fa\",\n          \"#ff7373\",\n          \"#00ffff\",\n          \"#40e0d0\",\n          \"#0000ff\",\n          \"#d3ffce\",\n          \"#b0e0e6\",\n          \"#c6e2ff\",\n          \"#003366\",\n          \"#800080\",\n          \"#7fffd4\",\n          \"#20b2aa\",\n          \"#333333\",\n          \"#66cdaa\",\n          \"#ff00ff\",\n          \"#ff7f50\",\n          \"#4ca3dd\",\n          \"#008000\",\n          \"#daa520\",\n          \"#000080\",\n        ],\n        dataLabels: {\n          enabled: false,\n        },\n        chart: {\n          type: \"area\",\n          animations: {\n            enabled: true,\n            easing: \"easeinout\",\n            speed: 800,\n            animateGradually: {\n              enabled: true,\n              delay: 0,\n            },\n            dynamicAnimation: {\n              enabled: false,\n              speed: 350,\n            },\n          },\n          // stacked: false,\n          // height: 350,\n          zoom: {\n            type: \"x\",\n            enabled: true,\n            autoScaleYaxis: true,\n          },\n          toolbar: {\n            autoSelected: \"zoom\",\n          },\n        },\n        fill: {\n          type: \"none\",\n          // gradient: {\n          //   shadeIntensity: 1,\n          //   inverseColors: false,\n          //   opacityFrom: 0.5,\n          //   opacityTo: 0,\n          //   stops: [0, 90, 100]\n          // },\n        },\n        stroke: {\n          // curve: \"smooth\",\n        },\n        xaxis: {\n          type: \"datetime\",\n          categories: [],\n        },\n        yaxis: {\n          labels: {\n            formatter: function (val) {\n              return val.toFixed(3) + \"Â°C\";\n            },\n          },\n        },\n        tooltip: {\n          x: {\n            format: \"dd/MM/yy\",\n          },\n        },\n      },\n    };\n  }\n\n  loadData = async () => {\n    this.setState({\n      waiting: true,\n    });\n    let response = await axios.put(`/api/temperature-data/monthly`);\n    response = response.data;\n\n    this.setState({\n      cities: response,\n      waiting: false,\n    });\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    let dates = [];\n    let series = [];\n\n    for (let city in this.state.cities) {\n      this.state.cities[city].dates.forEach((row) => {\n        dates.push(moment(row).format(\"MM-YY\"));\n      });\n      break;\n    }\n\n    for (let city in this.state.cities) {\n      if (this.props.tempType === \"max\") {\n        series.push(this.state.cities[city].series[0]);\n      }\n      if (this.props.tempType === \"mean\") {\n        series.push(this.state.cities[city].series[1]);\n      }\n      if (this.props.tempType === \"min\") {\n        series.push(this.state.cities[city].series[2]);\n      }\n    }\n\n    let options = {\n      ...this.state.options,\n      xaxis: {\n        ...this.state.options,\n        categories: dates,\n        tickAmount: 10,\n      },\n    };\n\n    return (\n      <div\n        style={{\n          backgroundColor: \"white\",\n          textAlign: \"center\",\n        }}\n      >\n        <br />\n        <h2>{this.state.name ? \"Temperature for \" + this.state.name : \"\"}</h2>\n        <br />\n        {this.state.waiting ? (\n          <div className=\"waiting-spinner\">\n            <PulseLoader\n              color=\"#2BC6CB\"\n              css={this.state.override}\n              loading={true}\n              size={20}\n              margin={10}\n            />\n          </div>\n        ) : (\n          <ReactApexChart\n            options={options}\n            series={series}\n            type=\"line\"\n            height={550}\n            width={900}\n          />\n        )}\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MinMaxAvgChart);\n","/Users/matthewkastner/Documents/skylar/population-temperatures/src/components/all-cities/MissingChart.js",["75","76","77","78","79"],"import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport moment from \"moment\";\n\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nclass MinMaxAvgChart extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: \"\",\n      cities: {},\n      waiting: false,\n      tempType: \"max\",\n      override: `\n        `,\n      options: {\n        colors: [\n          \"#420420\",\n          \"#133337\",\n          \"#065535\",\n          \"#c0c0c0\",\n          \"#000000\",\n          \"#5ac18e\",\n          \"#dcedc1\",\n          \"#f7347a\",\n          \"#576675\",\n          \"#ffc0cb\",\n          \"#ffe4e1\",\n          \"#008080\",\n          \"#ffd700\",\n          \"#e6e6fa\",\n          \"#ff7373\",\n          \"#00ffff\",\n          \"#40e0d0\",\n          \"#0000ff\",\n          \"#d3ffce\",\n          \"#b0e0e6\",\n          \"#c6e2ff\",\n          \"#003366\",\n          \"#800080\",\n          \"#7fffd4\",\n          \"#20b2aa\",\n          \"#333333\",\n          \"#66cdaa\",\n          \"#ff00ff\",\n          \"#ff7f50\",\n          \"#4ca3dd\",\n          \"#008000\",\n          \"#daa520\",\n          \"#000080\",\n          \"#bada55\",\n          \"#7fe5f0\",\n          \"#ff0000\",\n          \"#ff80ed\",\n          \"#407294\",\n        ],\n        dataLabels: {\n          enabled: false,\n        },\n        chart: {\n          type: \"area\",\n          animations: {\n            enabled: true,\n            // easing: \"easeinout\",\n            speed: 1200,\n            animateGradually: {\n              enabled: false,\n              delay: 0,\n            },\n            dynamicAnimation: {\n              enabled: false,\n              speed: 0,\n            },\n          },\n          // stacked: false,\n          // height: 350,\n          zoom: {\n            type: \"x\",\n            enabled: true,\n            autoScaleYaxis: true,\n          },\n          toolbar: {\n            autoSelected: \"zoom\",\n          },\n        },\n        fill: {\n          type: \"none\",\n          // gradient: {\n          //   shadeIntensity: 1,\n          //   inverseColors: false,\n          //   opacityFrom: 0.5,\n          //   opacityTo: 0,\n          //   stops: [0, 90, 100]\n          // },\n        },\n        stroke: {\n          // curve: \"smooth\",\n        },\n        xaxis: {\n          type: \"datetime\",\n          categories: [],\n        },\n        yaxis: {\n          labels: {\n            formatter: function (val) {\n              return val.toFixed(3) + \"Â°C\";\n            },\n          },\n        },\n        tooltip: {\n          x: {\n            format: \"dd/MM/yy\",\n          },\n        },\n      },\n    };\n  }\n\n  renderGraph = (cities) => {\n    let dates = [];\n    let series = [];\n    let points = [];\n    let xaxis = [];\n    for (let city in cities) {\n      cities[city].dates.forEach((row) => {\n        dates.push(moment(row).format(\"l\"));\n      });\n      break;\n    }\n\n    for (let city in cities) {\n      let tempType = 0;\n      if (this.props.tempType == \"min\") {\n        tempType = 0;\n      }\n      if (this.props.tempType == \"mean\") {\n        tempType = 1;\n      }\n      if (this.props.tempType == \"max\") {\n        tempType = 2;\n      }\n      cities[city].points[tempType].forEach((row) => {\n        let date = new Date(row.x).getTime();\n        // // console.log(cities[city].name, row)\n        points.push({\n          ...row,\n          x: date,\n        });\n      });\n      cities[city].xaxis.forEach((row) => {\n        let date = new Date(row.x).getTime();\n        xaxis.push({\n          ...row,\n          x: date,\n        });\n      });\n    }\n\n    for (let city in cities) {\n      if (this.props.tempType === \"max\") {\n        series.push(cities[city].series[0]);\n      }\n      if (this.props.tempType === \"mean\") {\n        series.push(cities[city].series[1]);\n      }\n      if (this.props.tempType === \"min\") {\n        series.push(cities[city].series[2]);\n      }\n    }\n\n    // let options = {\n    //   ...this.state.options,\n    //   xaxis: {\n    //     ...this.state.options,\n    //     categories: dates,\n    //     tickAmount: 10,\n    //   },\n    //   annotations: {\n    //     points,\n    //     xaxis,\n    //   },\n    // };\n\n    let options = {\n      ...this.state.options,\n      xaxis: {\n        ...this.state.options.xaxis,\n        categories: dates,\n        tickAmount: 10,\n      },\n      yaxis: {\n        labels: {\n          formatter: function (val) {\n            return val.toFixed(3) + \"Â°C\";\n          },\n        },\n      },\n      annotations: {\n        points,\n        xaxis,\n      },\n      chart: {\n        height: 550,\n        width: 900,\n        type: \"line\",\n        // stacked: false,\n        // height: 350,\n        zoom: {\n          type: \"x\",\n          enabled: true,\n          autoScaleYaxis: true,\n        },\n        toolbar: {\n          autoSelected: \"zoom\",\n        },\n      },\n      // dataLabels: {\n      //   enabled: false,\n      // },\n      // stroke: {\n      //   curve: \"straight\",\n      // },\n      series: series,\n      title: {\n        text: \"Line with Annotations\",\n      },\n      labels: dates,\n      // xaxis: {\n      //   type: \"datetime\",\n      // },\n    };\n\n    var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\n\n    chart.render();\n  };\n\n  loadData = async () => {\n    this.setState({\n      waiting: true,\n    });\n    let response = await axios.put(`/api/temperature-data/missing`);\n    response = response.data;\n\n    this.setState({\n      cities: response,\n      waiting: false,\n    });\n\n    this.renderGraph(response);\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          backgroundColor: \"white\",\n          textAlign: \"center\",\n        }}\n      >\n        <br />\n        <h2>{this.state.name ? \"Temperature for \" + this.state.name : \"\"}</h2>\n        <br />\n        {this.state.waiting ? (\n          <div className=\"waiting-spinner\">\n            <PulseLoader\n              color=\"#2BC6CB\"\n              css={this.state.override}\n              loading={true}\n              size={20}\n              margin={10}\n            />\n          </div>\n        ) : (\n          //   <ReactApexChart\n          //     options={options}\n          //     series={series}\n          //     type=\"line\"\n          //     height={550}\n          //     width={900}\n          //   />\n          <div id=\"chart\"></div>\n        )}\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MinMaxAvgChart);\n",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":158,"column":11,"nodeType":"86","endLine":158,"endColumn":54},{"ruleId":"87","severity":1,"message":"88","line":6,"column":8,"nodeType":"89","messageId":"90","endLine":6,"endColumn":19},{"ruleId":"87","severity":1,"message":"88","line":6,"column":8,"nodeType":"89","messageId":"90","endLine":6,"endColumn":19},{"ruleId":"87","severity":1,"message":"91","line":3,"column":8,"nodeType":"89","messageId":"90","endLine":3,"endColumn":22},{"ruleId":"87","severity":1,"message":"88","line":7,"column":8,"nodeType":"89","messageId":"90","endLine":7,"endColumn":19},{"ruleId":"92","severity":1,"message":"93","line":140,"column":31,"nodeType":"94","messageId":"95","endLine":140,"endColumn":33},{"ruleId":"92","severity":1,"message":"93","line":143,"column":31,"nodeType":"94","messageId":"95","endLine":143,"endColumn":33},{"ruleId":"92","severity":1,"message":"93","line":146,"column":31,"nodeType":"94","messageId":"95","endLine":146,"endColumn":33},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'queryString' is defined but never used.","Identifier","unusedVar","'ReactApexChart' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]