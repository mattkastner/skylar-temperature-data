{"version":3,"sources":["redux/reducer.js","components/SeasonalChart.js","components/MinMaxAvgChart.js","components/MissingChart.js","pages/Graph.js","pages/MapChart.js","routes.js","skylar_capital_management.png","components/Header.js","App.js","redux/store.js","reportWebVitals.js","index.js"],"names":["initialState","allCitiesData","locations","unmarkedLocations","city","LOAD_DATA","UPDATE_CITIES","UPDATE_LOCATIONS","UPDATE_UNMARKED_LOCATIONS","SELECT_CITY","SeasonalChart","loadData","name","a","setState","waiting","axios","put","response","data","temps","state","override","options","colors","dataLabels","enabled","chart","type","zoom","autoScaleYaxis","toolbar","autoSelected","fill","stroke","xaxis","categories","yaxis","labels","formatter","val","toFixed","tooltip","x","format","values","queryString","parse","this","props","location","search","dates","highs","seasonal","lows","forEach","row","push","moment","location_date","temp_max_c","temp_min_c","tickAmount","series","style","backgroundColor","textAlign","className","color","css","loading","size","margin","height","width","Component","withRouter","MinMaxAvgChart","avgs","temp_mean_c","MissingChart","console","log","renderMap","points","projected","Date","getTime","y","marker","fillColor","strokeColor","radius","label","borderColor","text","annotations","title","ApexCharts","document","querySelector","render","id","Graph","showSeasonal","showMinMaxAvg","showMissing","chartName","onChange","updateSelected","checked","connect","selectCity","payload","MapChart","getMapData","get","filter","Lat","map","markerOffset","coordinates","Lon","history","wait","geoUrl","position","e","target","value","defaultValue","disabled","hidden","background","projection","projectionConfig","rotate","scale","geography","geographies","d","properties","REGION_UN","geo","rsmKey","onClick","ry","left","top","onMouseEnter","onMouseLeave","r","exact","path","component","Header","alt","src","logo","App","refreshData","cities","undefined","temperatureData","pathname","includes","routes","updateCities","updateLocations","middleware","applyMiddleware","promise","createStore","action","high","mean","low","date","lon","lat","population","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.d106deab.chunk.js","sourcesContent":["import moment from \"moment\";\n\n//create the initial state\nconst initialState = {\n  allCitiesData: [],\n  locations: [],\n  unmarkedLocations: [],\n  city: {},\n};\n\n//action types\nconst LOAD_DATA = \"LOAD_DATA\";\nconst UPDATE_CITIES = \"UPDATE_CITIES\";\nconst UPDATE_LOCATIONS = \"UPDATE_LOCATIONS\";\nconst UPDATE_UNMARKED_LOCATIONS = \"UPDATE_UNMARKED_LOCATIONS\";\nconst SELECT_CITY = \"SELECT_CITY\";\n\n//actions builder {dispatchers}\nexport function loadData(data) {\n  return {\n    type: LOAD_DATA,\n    payload: data,\n  };\n}\n\nexport function updateCities(allCitiesData) {\n  return {\n    type: UPDATE_CITIES,\n    payload: allCitiesData,\n  };\n}\n\nexport function updateLocations(locations) {\n  return {\n    type: UPDATE_LOCATIONS,\n    payload: locations,\n  };\n}\n\nexport function updateUnmarkedLocations(unmarkedLocations) {\n  return {\n    type: UPDATE_UNMARKED_LOCATIONS,\n    payload: unmarkedLocations,\n  };\n}\n\nexport function selectCity(name) {\n  return {\n    type: SELECT_CITY,\n    payload: name,\n  };\n}\n\n//reducer\nexport default function reducer(state = initialState, action) {\n  console.log(action);\n  switch (action.type) {\n    case LOAD_DATA:\n      let allCitiesData = {};\n      let locations = [];\n      let unmarkedLocations = [];\n\n      action.payload.forEach((row) => {\n        if (allCitiesData[row.name]) {\n          allCitiesData[row.name].data.push({\n            projected: row.projected,\n            high: row.temp_max_c,\n            mean: row.temp_mean_c,\n            low: row.temp_min_c,\n            date: moment(row.location_date).format(\"l\"),\n          });\n        } else {\n          allCitiesData[row.name] = {\n            lon: row.Lon,\n            lat: row.Lat,\n            population: row.population,\n            data: [],\n          };\n\n          if (!row.population) {\n            unmarkedLocations.push(row.name);\n          } else {\n            locations.push({\n              markerOffset: 25,\n              name: row.name,\n              coordinates: [row.Lon, row.Lat],\n            });\n          }\n        }\n      });\n      return { ...state, allCitiesData, locations, unmarkedLocations };\n    case UPDATE_CITIES:\n      return { ...state, allCitiesData: action.payload };\n    case UPDATE_LOCATIONS:\n      return { ...state, locations: action.payload };\n    case UPDATE_UNMARKED_LOCATIONS:\n      return { ...state, unmarkedLocations: action.payload };\n    case SELECT_CITY:\n      let city = {};\n      for (let key in state.allCitiesData) {\n        if (key === action.payload) {\n          city = { ...state.allCitiesData[key], name: key };\n          break;\n        }\n      }\n      return { ...state, city };\n    default:\n      return state;\n  }\n}\n\n// Helper function\n","import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport moment from \"moment\"\n\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nclass SeasonalChart extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: \"\",\n      temps: [],\n      waiting: false,\n      override: `\n        `,\n      options: {\n        colors: [\"#cc3333\", \"#545454\", \"#3333cc\"],\n        dataLabels: {\n          enabled: false,\n        },\n        chart: {\n          type: \"area\",\n          // stacked: false,\n          // height: 350,\n          zoom: {\n            type: \"x\",\n            enabled: true,\n            autoScaleYaxis: true,\n          },\n          toolbar: {\n            autoSelected: \"zoom\",\n          },\n        },\n        fill: {\n          type: \"none\",\n          // gradient: {\n          //   shadeIntensity: 1,\n          //   inverseColors: false,\n          //   opacityFrom: 0.5,\n          //   opacityTo: 0,\n          //   stops: [0, 90, 100]\n          // },\n        },\n        stroke: {\n          // curve: \"smooth\",\n        },\n        xaxis: {\n          type: \"datetime\",\n          categories: [],\n        },\n        yaxis: {\n          labels: {\n            formatter: function (val) {\n              return val.toFixed(0) + \"°C\";\n            },\n          },\n        },\n        tooltip: {\n          x: {\n            format: \"dd/MM/yy\",\n          },\n        },\n      },\n    };\n  }\n\n  loadData = async (name) => {\n    this.setState({\n      waiting: true,\n    });\n    let response = await axios.put(`/api/temperature-data/seasonal`, { name });\n    response = response.data;\n\n    this.setState({\n      temps: response,\n      waiting: false,\n    });\n  };\n\n  componentDidMount() {\n    const values = queryString.parse(this.props.location.search);\n    this.setState({ name: values.name });\n    this.loadData(values.name);\n  }\n\n  render() {\n    let dates = [];\n\n    let highs = [];\n    let seasonal = [];\n    let lows = [];\n\n    this.state.temps.forEach((row) => {\n      dates.push(moment(row.location_date).format('l'));\n\n      highs.push(row.temp_max_c);\n      seasonal.push(+row.seasonal);\n      lows.push(row.temp_min_c);\n    });\n\n    let options = {\n      ...this.state.options,\n      xaxis: {\n        ...this.state.options,\n        categories: dates,\n        tickAmount: 10,\n      },\n    };\n\n    let series = [\n      {\n        name: \"High\",\n        data: highs,\n      },\n      {\n        name: \"Seasonal\",\n        data: seasonal,\n      },\n      {\n        name: \"Low\",\n        data: lows,\n      },\n    ];\n\n    return (\n      <div\n        style={{\n          backgroundColor: \"white\",\n          textAlign: \"center\",\n        }}\n      >\n        <br />\n        <h2>{this.state.name ? \"Temperature for \" + this.state.name : \"\"}</h2>\n        <br />\n        {this.state.waiting ? (\n          <div className=\"waiting-spinner\">\n            <PulseLoader\n              color=\"#2BC6CB\"\n              css={this.state.override}\n              loading={true}\n              size={20}\n              margin={10}\n            />\n          </div>\n        ) : (\n          <ReactApexChart\n            options={options}\n            series={series}\n            type=\"line\"\n            height={550}\n            width={900}\n          />\n        )}\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(SeasonalChart);\n","import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport moment from \"moment\";\n\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nclass MinMaxAvgChart extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: \"\",\n      temps: [],\n      waiting: false,\n      override: `\n        `,\n      options: {\n        colors: [\"#cc3333\", \"#545454\", \"#3333cc\"],\n        dataLabels: {\n          enabled: false,\n        },\n        chart: {\n          type: \"area\",\n          // stacked: false,\n          // height: 350,\n          zoom: {\n            type: \"x\",\n            enabled: true,\n            autoScaleYaxis: true,\n          },\n          toolbar: {\n            autoSelected: \"zoom\",\n          },\n        },\n        fill: {\n          type: \"none\",\n          // gradient: {\n          //   shadeIntensity: 1,\n          //   inverseColors: false,\n          //   opacityFrom: 0.5,\n          //   opacityTo: 0,\n          //   stops: [0, 90, 100]\n          // },\n        },\n        stroke: {\n          // curve: \"smooth\",\n        },\n        xaxis: {\n          type: \"datetime\",\n          categories: [],\n        },\n        yaxis: {\n          labels: {\n            formatter: function (val) {\n              return val.toFixed(0) + \"°C\";\n            },\n          },\n        },\n        tooltip: {\n          x: {\n            format: \"dd/MM/yy\",\n          },\n        },\n      },\n    };\n  }\n\n  loadData = async (name) => {\n    this.setState({\n      waiting: true,\n    });\n    let response = await axios.put(`/api/temperature-data/monthly`, { name });\n    response = response.data;\n\n    this.setState({\n      temps: response,\n      waiting: false,\n    });\n  };\n\n  componentDidMount() {\n    const values = queryString.parse(this.props.location.search);\n    this.setState({ name: values.name });\n    this.loadData(values.name);\n  }\n\n  render() {\n    let dates = [];\n\n    let highs = [];\n    let avgs = [];\n    let lows = [];\n\n    this.state.temps.forEach((row) => {\n      dates.push(moment(row.location_date).format('MM-YY'));\n\n      highs.push(row.temp_max_c);\n      avgs.push(row.temp_mean_c);\n      lows.push(row.temp_min_c);\n    });\n\n    let options = {\n      ...this.state.options,\n      xaxis: {\n        ...this.state.options,\n        categories: dates,\n        tickAmount: 10,\n      },\n    };\n\n    let series = [\n      {\n        name: \"High\",\n        data: highs,\n      },\n      {\n        name: \"Mean\",\n        data: avgs,\n      },\n      {\n        name: \"Low\",\n        data: lows,\n      },\n    ];\n\n    return (\n      <div\n        style={{\n          backgroundColor: \"white\",\n          textAlign: \"center\",\n        }}\n      >\n        <br />\n        <h2>{this.state.name ? \"Temperature for \" + this.state.name : \"\"}</h2>\n        <br />\n        {this.state.waiting ? (\n          <div className=\"waiting-spinner\">\n            <PulseLoader\n              color=\"#2BC6CB\"\n              css={this.state.override}\n              loading={true}\n              size={20}\n              margin={10}\n            />\n          </div>\n        ) : (\n          <ReactApexChart\n            options={options}\n            series={series}\n            type=\"line\"\n            height={550}\n            width={900}\n          />\n        )}\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MinMaxAvgChart);\n","import React, { Component } from \"react\";\nimport ApexCharts from \"apexcharts\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport moment from \"moment\";\n\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nclass MissingChart extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: \"\",\n      temps: [],\n      waiting: false,\n      override: `\n        `,\n      options: {\n        annotations: {\n          points: [\n            {\n              x: \"2015-04-11\",\n              y: 20.569119652,\n              marker: {\n                size: 8,\n              },\n              label: {\n                borderColor: \"#FF4560\",\n                text: \"Point Annotation\",\n              },\n            },\n          ],\n        },\n        colors: [\"#cc3333\", \"#545454\", \"#3333cc\"],\n        dataLabels: {\n          enabled: false,\n        },\n        chart: {\n          type: \"area\",\n          // stacked: false,\n          // height: 350,\n          zoom: {\n            type: \"x\",\n            enabled: true,\n            autoScaleYaxis: true,\n          },\n          toolbar: {\n            autoSelected: \"zoom\",\n          },\n        },\n        fill: {\n          type: \"none\",\n          // gradient: {\n          //   shadeIntensity: 1,\n          //   inverseColors: false,\n          //   opacityFrom: 0.5,\n          //   opacityTo: 0,\n          //   stops: [0, 90, 100]\n          // },\n        },\n        stroke: {\n          // curve: \"smooth\",\n        },\n        xaxis: {\n          type: \"datetime\",\n          categories: [],\n        },\n        yaxis: {\n          labels: {\n            formatter: function (val) {\n              return val.toFixed(0) + \"°C\";\n            },\n          },\n        },\n        tooltip: {\n          x: {\n            format: \"dd/MM/yy\",\n          },\n        },\n      },\n    };\n  }\n\n  loadData = async (name) => {\n    this.setState({\n      waiting: true,\n    });\n    let response = await axios.put(`/api/temperature-data/missing`, { name });\n    response = response.data;\n    console.log(response);\n    this.setState({\n      temps: response,\n      waiting: false,\n    });\n\n    this.renderMap(response);\n  };\n\n  renderMap = (temps) => {\n    let dates = [];\n\n    let highs = [];\n    let avgs = [];\n    let lows = [];\n\n    let points = [];\n    console.log(temps);\n    temps.forEach((row) => {\n      dates.push(moment(row.location_date).format(\"l\"));\n\n      highs.push(row.temp_max_c);\n      avgs.push(row.temp_mean_c);\n      lows.push(row.temp_min_c);\n      if (row.projected) {\n        console.log(\"projecting\");\n        points.push({\n          x: new Date(row.location_date).getTime(),\n          y: row.temp_min_c,\n          marker: {\n            size: 5,\n            fillColor: \"#cc8033\",\n            strokeColor: \"#d18d47\",\n            radius: 5,\n          },\n        });\n        points.push({\n          x: new Date(row.location_date).getTime(),\n          y: row.temp_mean_c,\n          marker: {\n            size: 5,\n            fillColor: \"#cc8033\",\n            strokeColor: \"#d18d47\",\n            radius: 5,\n          },\n        });\n        points.push({\n          x: new Date(row.location_date).getTime(),\n          y: row.temp_max_c,\n          marker: {\n            size: 5,\n            fillColor: \"#cc8033\",\n            strokeColor: \"#d18d47\",\n            radius: 8,\n          },\n          label: {\n            borderColor: \"black\",\n            text: row.location_date,\n          },\n        });\n      }\n    });\n\n    let series = [\n      {\n        name: \"High\",\n        data: highs,\n      },\n      {\n        name: \"Mean\",\n        data: avgs,\n      },\n      {\n        name: \"Low\",\n        data: lows,\n      },\n    ];\n\n    // let options = {\n    //   ...this.state.options,\n    //   annotations: {\n    //     points,\n    //   },\n    //   xaxis: {\n    //     ...this.state.options,\n    //     categories: dates,\n    //     tickAmount: 10,\n    //   },\n    // };\n\n    var options = {\n      ...this.state.options,\n      xaxis: {\n        ...this.state.options.xaxis,\n        categories: dates,\n        tickAmount: 10,\n      },\n      yaxis: {\n        labels: {\n          formatter: function (val) {\n            return val.toFixed(0) + \"°C\";\n          },\n        },\n      },\n      annotations: {\n        points: points,\n      },\n      chart: {\n        height: 550,\n        width: 900,\n        type: \"line\",\n        // stacked: false,\n        // height: 350,\n        zoom: {\n          type: \"x\",\n          enabled: true,\n          autoScaleYaxis: true,\n        },\n        toolbar: {\n          autoSelected: \"zoom\",\n        },\n      },\n      // dataLabels: {\n      //   enabled: false,\n      // },\n      // stroke: {\n      //   curve: \"straight\",\n      // },\n      series: series,\n      title: {\n        text: \"Line with Annotations\",\n      },\n      labels: dates,\n      // xaxis: {\n      //   type: \"datetime\",\n      // },\n    };\n\n    var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\n\n    chart.render();\n  };\n\n  componentDidMount() {\n    const values = queryString.parse(this.props.location.search);\n    this.setState({ name: values.name });\n    this.loadData(values.name);\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          backgroundColor: \"white\",\n          textAlign: \"center\",\n        }}\n      >\n        <br />\n        <h2>{this.state.name ? \"Temperature for \" + this.state.name : \"\"}</h2>\n        <br />\n        {this.state.waiting ? (\n          <div className=\"waiting-spinner\">\n            <PulseLoader\n              color=\"#2BC6CB\"\n              css={this.state.override}\n              loading={true}\n              size={20}\n              margin={10}\n            />\n          </div>\n        ) : (\n          <div id=\"chart\"></div>\n        )}\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MissingChart);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"../styles/Graph.scss\";\n\n// import PulseLoader from \"react-spinners/PulseLoader\";\n// import axios from \"axios\";\n\nimport { selectCity, loadData } from \"../redux/reducer\";\n\nimport SeasonalChart from \"../components/SeasonalChart\";\nimport MinMaxAvgChart from \"../components/MinMaxAvgChart\";\nimport MissingChart from \"../components/MissingChart\";\n\nclass Graph extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      showSeasonal: true,\n      showMinMaxAvg: false,\n      showMissing: false,\n      waiting: false,\n      override: `\n          display: block;\n          margin: auto auto;\n          border-color: red;\n        `,\n    };\n  }\n\n  updateSelected(chartName) {\n    let defaultState = {\n      showSeasonal: false,\n      showMinMaxAvg: false,\n      showMissing: false,\n    };\n    this.setState({\n      ...defaultState,\n      [chartName]: true,\n    });\n  }\n\n  render() {\n    let chart = null;\n    if (this.state.showSeasonal) {\n      chart = <SeasonalChart />;\n    }\n    if (this.state.showMinMaxAvg) {\n      chart = <MinMaxAvgChart />;\n    }\n    if (this.state.showMissing) {\n      chart = <MissingChart />;\n    }\n\n    return (\n      <div className=\"Graph\">\n        <form className=\"options\">\n          <div className=\"input-container\">\n            <input\n              onChange={() => this.updateSelected(\"showSeasonal\")}\n              checked={this.state.showSeasonal}\n              name=\"option\"\n              type=\"radio\"\n              id=\"min-max-avg\"\n              className=\"choices\"\n            />\n            <label>\n              Compare the seasonal average as well as high and low cases\n            </label>\n          </div>\n          <div className=\"input-container\">\n            <input\n              onChange={() => this.updateSelected(\"showMinMaxAvg\")}\n              checked={this.state.showMinMaxAvg}\n              name=\"option\"\n              type=\"radio\"\n              id=\"seasonal\"\n              className=\"choices\"\n            />\n            <label>View the monthly average, min and max</label>\n          </div>\n          <div className=\"input-container\">\n            <input\n              onChange={() => this.updateSelected(\"showMissing\")}\n              checked={this.state.showMissing}\n              name=\"option\"\n              type=\"radio\"\n              id=\"missing-data\"\n              className=\"choices\"\n            />\n            <label>See what data is projected.</label>\n          </div>\n        </form>\n        {chart}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { city: state.city };\n}\n\nexport default connect(mapStateToProps, {\n  selectCity,\n  loadData,\n})(withRouter(Graph));\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport axios from \"axios\";\n\nimport \"../styles/MapChart.scss\";\n\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\n\nclass MapChart extends Component {\n  constructor() {\n    super();\n    this.state = {\n      wait: true,\n      name: \"\",\n      locations: [],\n      unmarkedLocations: [],\n      override: `\n          display: block;\n          margin: auto auto;\n          border-color: red;\n        `,\n      waiting: true,\n      geoUrl:\n        \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\",\n    };\n  }\n\n  getMapData = async () => {\n    let response = await axios.get(\"/api/temperature-data/locations\");\n    let locations = response.data.data;\n    let unmarkedLocations = [];\n    // console.log(locations);\n    unmarkedLocations = locations.filter((city) => !city.Lat);\n    locations = locations.map((city) => {\n      return {\n        markerOffset: 25,\n        name: city.name,\n        coordinates: [city.Lon, city.Lat],\n      };\n    });\n    // console.log(unmarkedLocations);\n    this.setState({ locations, unmarkedLocations });\n    this.setState({ waiting: false });\n  };\n\n  selectCity = (name) => {\n    this.props.history.push(`/graph?name=${name}`);\n  };\n\n  componentWillMount() {\n    this.getMapData();\n  }\n\n  render() {\n    let locations = [...this.state.locations];\n    return (\n      <>\n        {this.state.waiting ? (\n          <PulseLoader\n            color=\"#2BC6CB\"\n            css={this.state.override}\n            loading={true}\n            size={20}\n            margin={10}\n          />\n        ) : (\n          <div style={{ width: \"100%\", height: \"100%\", position: \"relative\" }}>\n            <select\n              onChange={(e) =>\n                this.props.history.push(`graph?name=${e.target.value}`)\n              }\n              defaultValue=\"unmarked\"\n              className=\"no-location-pin\"\n            >\n              <option value=\"unmarked\" disabled hidden>\n                Selected an unmarked city\n              </option>\n\n              {this.state.unmarkedLocations.map((location) => (\n                <option key={location.name} value={location.name}>\n                  {location.name}\n                </option>\n              ))}\n            </select>\n            <ComposableMap\n              style={{ background: \"#2BC6CB\", height: \"100%\", width: \"100%\" }}\n              projection=\"geoAzimuthalEqualArea\"\n              projectionConfig={{\n                rotate: [95, -39, 0],\n                scale: 1300,\n              }}\n            >\n              <Geographies geography={this.state.geoUrl}>\n                {({ geographies }) =>\n                  geographies\n                    .filter((d) => d.properties.REGION_UN === \"Americas\")\n                    .map((geo) => (\n                      <Geography\n                        key={geo.rsmKey}\n                        geography={geo}\n                        fill=\"#EAEAEC\"\n                        stroke=\"#D6D6DA\"\n                      />\n                    ))\n                }\n              </Geographies>\n              {locations.map(({ name, coordinates, markerOffset }) => (\n                <Marker\n                  key={name}\n                  coordinates={coordinates}\n                  onClick={() => this.selectCity(name)}\n                >\n                  {this.state.name === name ? (\n                    <g>\n                      <rect\n                        className={\n                          this.state.name === name\n                            ? \"city-rect--hover\"\n                            : \"city-rect\"\n                        }\n                        ry={2}\n                      ></rect>\n                      <text\n                        className={\n                          this.state.name === name\n                            ? \"city-text--hover\"\n                            : \"city-text\"\n                        }\n                        x=\"12\"\n                        y=\"20\"\n                        left={40}\n                        top={4}\n                      >\n                        {name}\n                      </text>\n                    </g>\n                  ) : null}\n                  <circle\n                    onMouseEnter={() => this.setState({ name })}\n                    onMouseLeave={() => this.setState({ name: \"\" })}\n                    className={\n                      this.state.name === name\n                        ? \"city-circle--hover\"\n                        : \"city-circle\"\n                    }\n                    r={10}\n                  />\n                </Marker>\n              ))}\n            </ComposableMap>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n//we are curring the Auth component\nexport default withRouter(MapChart);\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\n//Import components\nimport Graph from \"./pages/Graph\";\nimport MapChart from \"./pages/MapChart\";\n\n//Router\nexport default (\n  <Switch>\n    <Route exact path=\"/\" component={MapChart} />\n    <Route path=\"/graph\" component={Graph} />\n  </Switch>\n);\n","export default __webpack_public_path__ + \"static/media/skylar_capital_management.9dd16507.png\";","import React, { Component } from \"react\";\nimport \"../styles/Header.scss\";\nimport logo from \"../skylar_capital_management.png\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"Header\">\n        <div>\n          <img alt=\"company logo\" className=\"logo\" src={logo} />\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import \"./styles/App.scss\";\n\nimport React, { Component } from \"react\";\nimport { RefreshCcw, ArrowLeft } from \"react-feather\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { withRouter } from \"react-router-dom\";\n\nimport routes from \"./routes\";\nimport { updateCities, updateLocations } from \"./redux/reducer\";\n\n// import moment from \"moment\";\n\nimport Header from \"./components/Header\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      waiting: false,\n      temperatureData: [],\n      locations: [],\n    };\n  }\n\n  refreshData = async () => {\n    let response = await axios.get(\"/api/temperature-data\");\n    // console.log(response.data.data);\n    let cities = {};\n    response.data.data.forEach((row) => {\n      if (cities[row.name] !== undefined) {\n        cities[row.name].push(row);\n      } else {\n        cities[row.name] = [row];\n      }\n    });\n    console.log(cities)\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <div className=\"content-body\">\n          <div className=\"map-wrapper\">\n            {this.props.location.pathname.includes(\"graph\") ? (\n              <div className=\"left-map-infomation\">\n                <button\n                  className=\"back\"\n                  disabled={this.state.waiting}\n                  onClick={() => this.props.history.push(\"/\")}\n                >\n                  <ArrowLeft color=\"#2BC6CB\" size={20} />\n                </button>\n                <div className=\"title\">\n                  {/* <h4>{this.props.city.name}</h4> */}\n                </div>\n              </div>\n            ) : null}\n            {routes}\n            <button\n              disabled={this.state.waiting}\n              onClick={this.refreshData}\n              className=\"refresh-circle\"\n            >\n              <RefreshCcw color=\"#2BC6CB\" size={20} />\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { city: state.city };\n}\n\nexport default connect(mapStateToProps, { updateCities, updateLocations })(\n  withRouter(App)\n);\n","import { createStore, applyMiddleware } from \"redux\";\nimport promise from \"redux-promise-middleware\";\n\nimport reducer from \"./reducer\";\nconst middleware = applyMiddleware(promise);\n\nexport default createStore(reducer, middleware);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { HashRouter } from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}